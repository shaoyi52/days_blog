URL 输入到页面展现过程：
	DNS解析（域名解析为二进制IP地址）
	TCP连接（三次握手）
		c => s （请求）		客户端准备请求服务端
		c <= s （响应，请求）	服务端端响应请求，并通知客户端 
		c => s （请求）		客户端发起请求准备
	发送http请求（请求行、请求头、请求体）
	服务端处理请求，返回http报文（响应行、响应头、响应体）
	浏览器解析渲染界面
		解析html结构树
		解析css结构树
		结合html和css生成渲染树
		渲染树计算节点信息
		根据计算的节点信息渲染页面
	断开连接（四次挥手）
		c => s	（准备请求关闭）
		c <= s	（响应请求关闭）
		c <= s	（响应数据发送完毕）
		c => s	（关闭请求）
	
	
闭包：一个函数和对该函数外部作用域的引用，能够读取其他函数内部变量的函数
闭包的缺陷：会造成内存泄漏、会改变父函数内部变量的值

作用域：
	函数内部可以读取函数外部的全局变量，在函数外部无法读取函数内的局部变量
	函数内部声明变量的时候，一定要先声明。如果不用，等于声明一个全局变量
	
跨域：
	网络协议不同：如http协议访问https
	端口不同：如80端口访问8080端口
	域名不同：baidu.com 访问xinlang.com
	子域名不同：a.baidu.com访问b.baidu.com
	域名和域名对应ip：baidu.com访问20.205.28.90
	
new一个构造函数时发生了什么
	创建一个新对象；
	将构造函数的作用域赋给新对象（因此this就指向了这个新对象）；
	执行构造函数中的代码（为这个新对象添加属性）；
	返回新对象。
	
call与apply的作用与区别
	作用：改变this指向
	区别：call = > 第一个参数是this值没有变化，参数都直接传递给函数
		  apply => 第一个参数是this值没有变化，传递给函数的是参数数组
	
事件冒泡：事件会从最内层的元素开始发生，一直向上传播，直到document对象
事件委托：利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行
	
document ready和document load的区别：
	共同点：页面文档加载时触发
	异同点：onload => 只能编写一个。所有资源加载完毕触发（样式，脚本，图片等资源） 
			ready => 同时编写多个。DOM结构绘制完毕后就执行
	
link和@import的区别：
	link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务
	@import属于CSS范畴，只能加载CSS
	
import和require区别：
	import是es规范，require是node规范。两种不同的模块化管理规范
	
prototype与__proto__区别：
	prototype：显式原型，用来实现基于原型的继承与属性的共享
	__proto__：隐式原型，构成原型链，同样用于实现基于原型的继承
	
重绘和回流：
	重绘：属性发生改变或者样式改变而不会影响布局的
	回流：布局或者属性需要改变就称为回流
	
	回流必定会发生重绘，重绘不一定会引发回流。
	
深拷贝浅拷贝：
	浅拷贝：Object.assign，展开运算符...
	深拷贝：JSON.parse(JSON.stringify(object))
	
数组的slice和splice区别：
	共同点：操作数据，截取一段数组
	区别：slice(start，end)		1.从start开始截取到end但是不包括end		2.返回值为截取出来的元素的集合	3.原始的数组不会发生变化
		  splice(start,deleteCount,item1,item2)		1.start参数 开始的位置	2.deleteCount 要截取的个数	3.item要添加的元素	4.改变原数组
	
http与https区别：
	http：超文本传输协议（明文传输，对称加密）
	https：超文本传输安全协议（数据传输过程是加密，非对称加密，服务端返回证书，请求接口根据TCP号解析参数）
	
作用域链和执行上下文的理解：
	作用域：独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突
	执行上下文：JavaScript执行在单线程上，所有的代码都是排队执行
				执行全局的代码时，首先创建全局的执行上下文，压入执行栈的顶部
				每当进入一个函数的执行就会创建函数的执行上下文，并且把它压入执行栈的顶部。当前函数执行完成后，当前函数的执行上下文出栈，并等待垃圾回收
				浏览器的JS执行引擎总是访问栈顶的执行上下文
				全局上下文只有唯一的一个，它在浏览器关闭时出栈
	
JS事件循环机制：
	JS是单线程从上到下执行
	宏任务=>微任务(promise)=>渲染线程渲染页面=>宏任务=>微任务(promise)=>渲染线程渲染页面
	
DOM事件流的三个阶段：
	事件捕获阶段、处于目标阶段、事件冒泡阶段
	
promise三种状态：
	pending（进行中）、reslove（成功）、reject（失败） 
	
promise与async/await区别：	
	都是处理异步请求
	promise是链式编程，错误需要通过回调函数来捕获
	promise是ES6，async/await是ES7
	await只能在async函数体内
	写法更加优雅，代码更简洁（异步转换同步）
	
继承方式：
	原型链继承、构造继承、组合继承、寄生式继承

less与sass区别：
	相同：混入、参数混入、嵌套规则、运算、作用域
	不同：less基于javascript，客户端处理，变量用@
		  sass基于ruby，服务端处理，变量用$
	

vue相关
vue生命周期：
	beforeCreate => 创建前 	此阶段为实例初始化之后，this指向创建的实例(data,computed,watch,methods方法和数据均不能访问)
	created => 创建后 	实例已经创建，完成数据（data、props、computed）的初始化导入依赖项(data,computed,watch,methods方法和数据可以访问)
	beforeMount => 挂载前 	获取得不到具体的DOM元素，但vue挂载的根节点已经创建
	mounted => 挂载完成 	完成挂载DOM和渲染，双向绑定
	beforeUpdate => 更新前 	数据更新前，数据驱动DOM
	updated => 更新完成	 	数据更新后，完成虚拟DOM的重新渲染
	beforeDestroy => 销毁前 	组件销毁确认
	destroyed => 销毁完成 	销毁监听事件，组件、事件、子实例也被销毁
	
双向数据绑定
	用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty（）来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调

$router和$route的区别
	$route：“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数
	$router：“路由实例”对象包括了路由的跳转方法，钩子函数等
	
mixins：分发Vue组件中的可复用功能，混入对象可以包含任意组件选项

vue为什么要求组件模板只能有一个根元素：
	通过这个根节点，来递归遍历整个vue实例下的所有节点，并处理为vdom，最后再渲染成真正的HTML，插入在正确的位置
	
vue双向绑定原理：
	vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。
	利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)
	
vue data为什么是函数：
	vue的data数据其实是vue原型上的属性，数据存在于内存当中
	保证每个实例上的data数据的独立性，规定了必须使用函数，而不是对象
	
vue v-for循环中key的作用：
	使用key时，它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素
	有相同父元素的子元素必须有独特的key，重复的key会造成渲染错误。
	
vue 组件之间数据传递方式：
	父组件=>子组件（props）	
	子组件=>父组件（子组件emit，父组件v-on监听）
	$root / $parent / $children / ref属性
	事件总线（已废弃）
	vuex
	
vue项目优化：
	--代码层面：v-if与v-show使用场景，computed与watch使用场景，v-if与v-for使用场景，
	  长列表性能优化（Object.freeze禁止数据劫持），事件销毁，图片资源懒加载，路由懒加载，插件按需引入
	--Webpack层面：图片压缩，提取公共代码，模板预编译，提取公共css
	--web技术层面：浏览器缓存，CDN的使用
	
vue区分环境：
	编写环境文件，package.json修改命令配置，搭建不同环境不同配置
	
	
flex布局，更好的重排性能，justify-content水平居中，align-item垂直居中
重绘：某些元素的外观被改变（color，background，visibility）。重排（回流）：重新生成布局，重新排列元素。重绘不一定导致重排，重排一定导致重绘
移动端1px方案：0.5px，插件postcss-pxtorem，伪类 + transform
异步加载css：利用媒体查询（设置一个当前浏览器不支持的值）异步加载这个CSS文件，在加载完毕之后，使用onload属性将link的媒体类型设置为all，然后便开始渲染。
			 提前加载资源（<link rel="preload" href="./index.css" as="style" onload="this.rel='stylesheet'">）
vue深度选择器：/deep/，::v-deep >>>

vue:
mvvm--View层和Model层并没有直接联系，而是通过ViewModel层进行交互。 
	  ViewModel层通过双向数据绑定将View层和Model层连接了起来，使得View层和Model层的同步工作完全是自动的
组件通信--props/$emit（父子），$parent / $children与 ref（子获父，父获子，访问具体组件），$emit/$on（a->父，父->b），vuex（状态管理）
插槽--匿名插槽（默认）,具名插槽，作用域插槽
sync修饰符：实现父子组件数据之间的双向绑定，与v-model类似。多了一个事件监听，回调函数中，会把接收到的值赋值给属性绑定的数据项中。代码间接
请求如何封装--loading，超时时间，get/post参数区分（token，appid），请求拦截（超时），响应拦截（响应状态跳转）
vue-router--动态路由匹配：通配符*只匹配被/分隔的URL字符。通配符时，$route.params 内会自动添加一个名为 pathMatch 参数
		  --参数传值：name，path，params（this.$router，路由实例），this.$route（路由对象）
--响应路由参数变化：watch监听，导航守卫（beforeRouteUpdate）
--不同路由不同title：增加meta（定义），router.beforeEach（设置）
--重定向：redirect
--vuex：state，getter，moutation，action，module
--避免重新渲染：keep-alive
--v-for与key：使用v-for更新已渲染的元素列表时,默认用就地复用策略;列表数据修改的时候,他会根据key值去判断某个值是否修改,如果修改,则重新渲染这一项,否则复用之前的元素
--v-if与v-for：v-for优先级更高，v-if需放在外层，不然循环判断v-if
--自定义组件：props/$emit（父子），$parent / $children与 ref（子获父，父获子，访问具体组件），$emit/$on（a->父，父->b）
--nexttick:Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新
		--原理：把回调函数放入callbacks等待执行，将执行函数放到微任务或者宏任务中，事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调
vue3
--组件通信：provide（传值），inject（接收）、vuex、slot、props
--composition API与option API区别：
	option：（data，methods，mounted，computeds）代码零散
	composition：不同的功能代码封装到不同的函数，使每个methods方法变成一个函数调用
--ref与reactive：ref（string，Boolean等基本类型）数据响应问题，获取值要.value。reactive（array，object等引用类型）数据响应问题，获取值直接获取
--setup参数、获取vue实例：参数props，ctx。实例ctx，ctx.emit()
--2.0与3.0生命周期对比：
beforeCreate  -> setup()
created       -> setup()
beforeMount   -> onBeforeMount
mounted       -> onMounted
beforeUpdate  -> onBeforeUpdate
updated       -> onUpdated
beforeDestroy -> onBeforeUnmount
destroyed     -> onUnmounted
activated     -> onActivated
deactivated   -> onDeactivated
errorCaptured -> onErrorCaptured
	
	
	
	