定义正则：
1.re= new RegExp("a")
2.re= /a/

正则用法：
1.test(): :在字符串中查找符合正则的内容，若查找到返回true,反之返回false.
  用法：正则.test(字符串)
  例子：
function isValidEmail(email) {
  // 正则表达式，简单匹配电子邮件格式，如：example@example.com
  var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
  
  // 使用test方法检查email是否符合正则表达式的规则
  return emailPattern.test(email);
}

// 测试函数
console.log(isValidEmail("example@example.com")); // 应输出: true
console.log(isValidEmail("not-an-email")); // 应输出: false


2.exec(): 在字符串中查找符合正则的内容，并返回内容，格式为数组
 用法：正则.exec(字符串)；
 例子：
需求：从124fddr323532${xxxasdsafxx}253${bnm}23354${abcd}233545xx54${666}233545xxxxx这类字符串中获取${}中的内容。注意${xxx}的个数是不确定的

function getExecStrs (str) {
        var reg = /\$\{(.+?)\}/g
        var list = []
        var result = null
        do {
            result = reg.exec(str)
            result && list.push(result[1])
        } while (result)
        return list
    }

提取匹配内容
str = "<html><head><title>呵呵呵</title></head><body></body></html>";
reg = /<title>([\s\S]+)<\/title>/gi
var result;
if ((result = reg.exec(str)) != null) {
    alert(result);//显示“<title>呵呵呵</title>”，“呵呵呵”
    alert(result[1]);//显示“呵呵呵”
    //
}


3.search()：在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1
示例：
let dateText = "Meeting on 2023-04-15 at 14:30";
let datePattern = /(\d{4})-(\d{2})-(\d{2})/; // 匹配YYYY-MM-DD格式的日期
let dateMatchPosition = dateText.search(datePattern);
console.log(dateMatchPosition); // 输出: 10，匹配的日期开始位置

4.match()： 在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。 
5

示例
需求：从124fddr323532${xxxasdsafxx}253${bnm}23354${abcd}233545xx54${666}233545xxxxx这类字符串中获取${}中的内容。注意${xxx}的个数是不确定的
function getMatchedStrs (str) {
        var reg = /\$\{(.+?)\}/
        var reg_g = /\$\{(.+?)\}/g
        var result = str.match(reg_g)
        var list = []
        for (var i = 0; i < result.length; i++) {
            var item = result[i]
            list.push(item.match(reg)[1])
        }
        return list
    }
5.replace() :查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。
示例：
需求1：数组遍平化 arr = [1, [2, [3, [4, 5]]], 6]
const res2 = JSON.stringify(arr).replace(/\[|\]/g, '').split(',')

需求2：金额格式化 "123456789012"转换'123,456,789,012'
reg=/(\d+)(\d{3})/   
t="123456789012"
while(reg.test(t)){ t=t.replace(reg,'$1'+','+'$2')} //t='123,456,789,012'

参考地址：
https://m.biancheng.net/view/5632.html

一、正则表达式字符
二、练习例子【1.手机号、网址、密码】
1.手机号【reg=/1[1-9]{1}\d{9}/ => reg.test('1314567892')】
