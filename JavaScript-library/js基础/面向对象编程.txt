面向对象的三大特征是封装，继承，多态。
  封装有利于提高类和系统的安全性；
  继承可以建立类的层次或等级；
 多态实现同一操作作用与不同类的实例，将产生不同的执行结果

二、五大原则 Five Principle

0.总原则：开闭原则 Open Close Principle
定义：一个软件实体应当对扩展开放，对修改关闭
关键：通过抽象封装可变元素
目的：在不修改源代码的情况下改变模块的行为
1.单一职责 Single Responsibility Principle
定义：一个对象应该只包含单一的职责。并将该职责完整的封装到一个类中。
另一种定义：就一个类而言，应该仅有一个引起它变化的原因。
关键：单一职责，高内聚，低耦合
目的：高内聚，低耦合
2.里氏替换原则 Liskov Substitution Principle
是实现开闭原则的重要方式之一

定义：所有引用基类的地方都能透明的使用其子类。是实现开闭原则的重要方式之一。
目的：在程序中尽量使用积累类型来对对象进行定义，而在运行时在确定其子类类型。
3.依赖倒转原则 Dependence Inversion Principle
是实现开闭原则的主要手段

定义：高层模块不应该依赖底层模块,都应该依赖抽象，细节依赖于抽象，抽象不依赖于细节。
常用实现方式：在代码中使用抽象类，而将具体类放在配置文件中。
4.接口隔离原则 Interface segregation Principle
定义：客户端不应该依赖那些它不需要的接口interface（这里的接口指的是所定义的方法）。
另一种定义：一旦一个接口太大，则需要将它分割成一些更细小的接口，使用该接口的客户端仅需要知道与之相关的方法即可。
5.迪米特法则 Law of Demeter（最少知识原则 Least Knowledge Principle）
定义1：不要和陌生人说话
定义2：至于你的直接朋友通信
一个软件实体应当尽可能少的与其他实体发生相互作用
狭义的迪米特法则：降低类之间的耦合
广义的迪米特法则：指对对象之间的信息流量、流向以及信息的影响的控制，信息隐藏可以使各个子系统脱耦，而独立开发、优化等。
6.合成复用原则 Composite Reuse Principle
定义：尽量使用对象组合，而不是继承来达到复用的目的。
实现：多使用聚合、组合关系，少用继承

function Person(name,age){
	this.name=name
	this.age=age
}
Person.prototype={
	constructor:Person//=>手动将constructor指向正确的构造函数
	type:'human',
	sayHello:function(){
		console.log("我叫"+this.name+',我今年 '+this.age+'岁了')
	}

}
